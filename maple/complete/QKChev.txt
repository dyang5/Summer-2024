QKChevTypeA:=module()
  option package;
  export perms_with_descent,perm_inverse,perm_longest,perm_dual,perm_length,perm_compose,perm_reduced_word,
  perm_hecke_act,perm_hecke_mult,perm_bruhat_leq,perm_deg2perm,two_kgw,two_kgw_table,qkmonk_inner,
  qkmonk_single,qkmonk,qkmonk_table,minrep_GP_A,qkmonk_GP_A_table,qkmonk_GP_A_inner,qkmonk_GP_A_guess,qkmonk_3step_check;

# gets all permutations in S_n with descents at subset of elements in F
perms_with_descent := proc(F)
	local len, n, i, j, perm;
	len := nops(F);
	n := F[len];

	local descent_perms := [];
	local all_perms := combinat[permute]([seq(j, j=1..n)]);

	for perm in all_perms do
		local descent_index := 2; local add := true; i := 1;
		for i from 1 to n - 1 do
			if i = F[descent_index] then
				descent_index := descent_index + 1;
			else
				if perm[i] > perm[i+1] then
					add := false;
					break;
				end if;	
			end if;
		end do;
		if add then
			descent_perms := [op(descent_perms), perm];
		end if;
	end do;
	return descent_perms;
end proc;


perm_inverse := proc(w)
  local res, i;
  res := array(w);
  for i from 1 to nops(w) do
    res[w[i]] := i;
  od;
  [seq(res[i], i=1..nops(w))];
end:

perm_longest := proc(n)
  local i;
  [seq(n+1-i,i=1..n)];
end:

perm_dual := proc(w)
  local i;
  map(i->nops(w)+1-i, w);
end:

perm_length := proc(w)
  local i, j;
  `+`(seq(seq(`if`(op(i,w)>op(j,w),1,0),i=1..j-1),j=2..nops(w)));
end:

perm_compose := proc(u, v)
  local i;
  [seq(u[i],i=v)];
end:

perm_reduced_word := proc(w)
  local wa, len, res, k, i, j, t;
  wa := array([op(w)]);
  len := perm_length(w);
  res := array([0$len]);
  k := 0;
  for i from nops(w)-1 to 1 by -1 do
    for j from 1 to i do
      if wa[j] > wa[j+1] then
        t := wa[j];
        wa[j] := wa[j+1];
        wa[j+1] := t;
        k := k+1;
        res[k] := j;
      fi;
    od;
  od;
  [seq(res[len-k],k=0..len-1)];
end:

perm_hecke_act := proc(w, word)
  local u, i;
  u := w;
  for i in word do
    if u[i]<u[i+1] then
      u := subsop(i=u[i+1],i+1=u[i], u);
    fi;
  od;
  u;
end:

perm_hecke_mult := proc(u, v)
  perm_hecke_act(u, perm_reduced_word(v));
end:

perm_bruhat_leq := proc(u, v)
  evalb(perm_hecke_mult(perm_dual(u), perm_inverse(v)) 
        = perm_longest(nops(u)));
end:

perm_deg2perm := proc(d)
  option remember;
  local n, m, i, j;
  n := nops(d);
  m := max(op(d));
  perm_hecke_act([seq(i,i=1..n+1)], 
    [seq(op([seq(`if`(d[i]>=j,i,NULL),i=1..n),
    seq(`if`(d[n-i]>=j,n-i,NULL),i=0..n-1)]), j=1..m)]);
end:


two_kgw := proc(u, v, d)
  local w0ud;
  w0ud := perm_hecke_mult(perm_dual(u), perm_deg2perm(d));
  `if`(perm_bruhat_leq(v, w0ud), 1, 0);
end:


two_kgw_table := proc(d)
  local symgp, i, j, u, v, gw;
  symgp := combinat[permute](nops(d)+1);
  for i from 1 to nops(symgp) do
    for j from 1 to i do
      u := symgp[i];
      v := symgp[j];
      gw := two_kgw(u, v, d);
      printf("I(%a,%a ; %a) = %d\n", u, v, d, gw);
    od;
  od;
  NULL;
end:


qkmonk_inner := proc(p, w, a, b)
  local lw, res, i, j, w1, lw1, k;
  lw := perm_length(w);
  res := G[op(w)];
  i := a;
  j := b;
  while j>p+1 or i<p do
    i := i+1;
    if i=p+1 then j := j-1; i := 1; fi;
    w1 := subsop(i=w[j],j=w[i], w);
    lw1 := perm_length(w1);
    if lw1 = lw+1 then
      res := res - qkmonk_inner(p, w1, i, j);
    elif lw1 = lw-2*(j-i)+1 then
      res := res - `*`(seq(cat(q,k),k=i..j-1)) * qkmonk_inner(p, w1, i, j);
    fi;
  od;
  res;
end:

qkmonk_single := proc(p, w)
  G[op(w)] - expand(qkmonk_inner(p, [op(w)], 0, nops(w)));
end:

qkmonk := proc(p, w)
  if type(w,`+`) or type(w,`*`) then
    map2(qkmonk, p, w);
  elif type(w,list) or (type(w,indexed) and op(0,w)=`G`) then
    qkmonk_single(p, w);
  else
    w;
  fi;
end:

qkmonk_table := proc(n)
  local symgp, p, w;
  symgp := combinat[permute](n);
  for p from 1 to n-1 do
    for w in symgp do
      lprint(p, w, qkmonk(p,w));
      # dif := qkmonk(p,w) - D[p]*G[op(w)];
      # lprint(p, w, indets(dif) minus {D[p],seq(q||i,i=1..n-1)});
    od;
  od;
  NULL;
end:

minrep_GP_A := proc(w,a) # a=[0,a_1,...,a_m,n]; Fl(a_1,...,a_m,n); a_i=a_j allowed
    local m,t,rep,i;
    m:=nops(a)-2;
    rep:=w;
    for t from 1 to m+1 do
        rep:=[seq(rep[i],i=1..a[t]),op(sort({seq(rep[i],i=a[t]+1..a[t+1])})),seq(rep[i],i=a[t+1]+1..a[m+2])];
        # lprint(t,w,rep);
    end do;
    rep;
end proc:  

qkmonk_GP_A_table := proc(F)
	local perm, t, descent_perms, transpositions;
	descent_perms := perms_with_descent(F);
	transpositions := [F[2], F[3]];
	for perm in descent_perms do
		for t in transpositions do
			lprint(t, perm,qkmonk_GP_A_inner(t,perm,F));
		end do;
	end do;
end proc;

qkmonk_GP_A_inner:=proc(p,w,a) # w is minimal representative; a=[0,a_1,...,a_m,n]; Fl(a_1,...,a_m,n); p \in {a_1,...,a_m}; a_i=a_j allowed
    local prd,terms,qlst,qsb,Gs,Gsb,x,i,n;
    n:=a[nops(a)];
    prd :=qkmonk(p,w);
    # lprint(prd);
    coeffs(prd,indets(prd),'terms');
    qlst := [seq(cat(q, i), i = 1 .. n-1)];
    qsb := map(i->(i=1),qlst);
  #lprint(terms);
    Gs :=subs(qsb,[terms]);
    Gsb :=[];
    for x in Gs do
        Gsb :=[op(Gsb),x=G[op(minrep_GP_A([op(x)],a))]];
    end do;  
    # lprint(Gsb);
    prd :=subs(Gsb,prd);
    qlst :={op({seq(cat(q, i), i = 0 .. n)})} minus {op({seq(cat(q,a[i]),i=1..nops(a))})};
    qsb := map(i->(i=1),qlst);
    prd :=subs(qsb,prd);
    prd; 
end proc:

qkmonk_GP_A_guess :=proc(p,w,a) # w is minimal representative; a=[0,a_1,...,a_m,n]; Fl(a_1,...,a_m,n); p \in {a_1,...,a_m}; a_i=a_j allowed
    local prd,i,i0,j,z,k,S,nterms,s,t,u,v,sgn,qp,cond,r,l,m,n,rr,ll;
    m:=nops(a)-2;
    n:=a[m+2];
    prd:=0;	
    nterms:=0;
    S:={[-1,1,[[0,n]],w]}; # sign, q powers, path, w
    while numelems(S)>0 do
        for s in S do
            l:=s[3][nops(s[3])][1];
            r:=s[3][nops(s[3])][2];
            # lprint(l,r);
            for j from r by -1 to p+1 do
                #   lprint(j);
                if j=r then
                    i0:=l+1;
                else 
                    i0:=1;
                fi:
                #lprint(i0);
                #lprint(T);
                for i from i0 to p do
                    #  	lprint(s);
                    # lprint(i,j);
                    cond:=true;
                    for k from 2 to nops(s[3]) do
                        ll:=s[3][k][1];
                        rr:=s[3][k][2];	
                        # lprint(ll,rr);
                        for t from 1 to m+1 do
                            # lprint(t,a[t]+1,a[t+1]);
                            if ll=i then
                                if (a[t]+1<=j and j<=rr and rr<=a[t+1]) then 
                                    cond:=false;
                                fi:
                            elif rr=j then
                                if (a[t]+1<=ll and ll<=i and i<=a[t+1]) then
                                    cond:=false;
                                fi:
                            fi:
                        end do;
                    end do;
                    # lprint(s[3],i,j,cond);
                    if cond=true then
                        for rr from n by -1 to p+1 do
                            for ll from 1 to p do
                                for t from 1 to m+1 do
                                # lprint(i,j,ll,rr,t,a[t]+1,a[t+1]);
                                    if ll=i then
                                        if (a[t]+1<=j and j<rr and rr<=a[t+1]) then
                                            z:=0; 
    	                                      v:=s[4];
                                            for k from ll+1 to rr-1 do
                                                if v[ll]<v[k] then
    	                                              z:=z+1;
    	                                          fi:
    	                                          if v[k]<v[rr] then
    	                                              z:=z+1;
    	                                          fi:
                                            end do;
                                            if (v[ll]<v[rr] and z=rr-ll-1) or (v[ll]>v[rr] and z=0) then
        	                                      cond:=false;
        	                                  fi:
                                            # lprint(cond);
                                        fi:
        	                          elif rr=j then
        	                              if (a[t]+1<=ll and ll<i and i<=a[t+1]) then
        	                                  z:=0; 
    	                                      v:=s[4];
                                            # lprint(v);
                                            for k from ll+1 to rr-1 do
                                                if v[ll]<v[k] then
    	                                              z:=z+1;
    	                                          fi:
                                                if v[k]<v[rr] then
                                                    z:=z+1;
    	                                          fi:
                                            end do;
                                            # lprint(i,j,ll,rr,z);
                                            if (v[ll]<v[rr] and z=rr-ll-1) or (v[ll]>v[rr] and z=0) then
        	                                      cond:=false;
        	                                  fi:
                                            # lprint(cond);
        	                              fi:
        	                          fi:  
                                end do;
                            end do;
                        end do;
                    fi:
                    if cond=true then  
    	                z:=0; 
    	                v:=s[4];
                        for k from i+1 to j-1 do
                            if v[i]<v[k] then
    	                        z:=z+1;
    	                    fi:
    	                    if v[k]<v[j] then
                                z:=z+1;
                            fi:
                        end do;
                        #    lprint(z);
                        if v[i]<v[j] and z=j-i-1 then
                            u:=v;
                            u[i]:=v[j];
                            u[j]:=v[i];
                            sgn:=(-1)*s[1];
                            #      lprint(s,sgn);
                            # u:=minrep_FLab(u,a,b,n);
                            # prd:=prd+sgn*s[2]*G[op(u)];
                            prd:=prd+sgn*s[2]*G[op(minrep_GP_A(u,a))];
                            nterms:=nterms+1;
                            S:=S union {[sgn,s[2],[op(s[3]),[i,j]],u]};
                            # T:=T union {[i,j]};
                            # lprint(nterms,S);
                            #     lprint(prd);
                            if (type(prd,indexed) or type(prd,`*`)) and nterms<>1 then    
                                lprint(p,w,a);
                                lprint(nterms,prd);
                                ERROR("Cancellation");
                            fi:
                            if type(prd,`+`) and nterms<>nops(prd) then
  	                            lprint(p,w,a);
                                lprint(nterms,prd);
                                ERROR("Cancellation");
                            fi:
                        fi:
                        if v[i]>v[j] and z=0 then
                            u:=v;
                            u[i]:=v[j];
                            u[j]:=v[i];
                            sgn:=(-1)*s[1];
                            qp:=s[2];
                            for t from 2 to m+1 do
                                if i<=a[t] and a[t]<j then
                                    qp:=qp*cat(q,a[t]);
                                fi:
                            end do;
                            #  u:=minrep_FLab(u,a,b,n);
                            #  prd:=prd+sgn*qp*G[op(u)];
                            prd:=prd+sgn*qp*G[op(minrep_GP_A(u,a))];
                            nterms:=nterms+1;
                            S:=S union {[sgn,qp,[op(s[3]),[i,j]],u]};
                            #  T:=T union {[i,j]};
                            # lprint(nterms,S);
                            if (type(prd,indexed) or type(prd,`*`)) and nterms<>1 then 
                                lprint(p,w,a);
                                lprint(nterms,prd);
                                ERROR("Cancellation");
                            fi:
                            if type(prd,`+`) and nterms<>nops(prd) then
  	                            lprint(p,w,a);
                                lprint(nterms,prd);
                                ERROR("Cancellation");
                            fi:
                            #        lprint(prd);            
                        fi:
                    fi:	
                end do;
            end do;
            S:=S minus {s};
   #   lprint(S);
        end do;
    end do;
    prd;
end proc: 

qkmonk_3step_check :=proc(n)
    local i,p,a,b,w1,w2,w3,rest,rest1,rest2,rest3,w;
    for b in combinat[choose]([seq(i,i=1..n-1)],3) do
        a:=[0,op(b),n];
        # lprint(a);
        rest:={seq(i,i=1..n)};
        # lprint(combinat[choose]([op(rest)],a[2]-a[1]));
        for w1 in combinat[choose]([op(rest)],a[2]-a[1]) do
            # lprint(w1,w);
            rest1:=rest minus {op(w1)};
            # lprint(combinat[choose]([op(rest1)],a[3]-a[2]));
            for w2 in combinat[choose]([op(rest1)],a[3]-a[2]) do
                # lprint(w);
                rest2:=rest1 minus {op(w2)};
                for w3 in combinat[choose]([op(rest2)],a[4]-a[3]) do
                    rest3:=rest2 minus {op(w3)};
                    w:=[op(w1),op(w2),op(w3),op(rest3)];
                    # lprint(w);
                    for p in b do
                        lprint(p,w,a,qkmonk_GP_A_inner(p,w,a));
                        # lprint(p,w,a,qkmonk_GP_A_guess(p,w,a));
                        if qkmonk_GP_A_inner(p,w,a)<>qkmonk_GP_A_guess(p,w,a) then
                            lprint(p,w,a,qkmonk_GP_A_inner(p,w,a));
                            lprint(p,w,a,qkmonk_GP_A_guess(p,w,a));
                            ERROR("Formula Fails");
                        fi:
                    end do;
                end do;
            end do;
        end do;
    end do;
    lprint("done");
    NULL;
end proc:

end module: