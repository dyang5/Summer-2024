# replacing deprecated pos function
pos := proc(L::list, val)
	local len := nops(L);
	for i from 1 to len do
		if L[i] = val then
			return i;
		end if;
	end do;
end proc;

# quantum elementary standard monomials in partial flags
qe_pf := proc(F::Array, deg, block)
	local sz, cp, res, a;
	sz := F[block];
	a := LinearAlgebra[SubMatrix](q_mat(F), [1..sz], [1..sz]);
	cp := LinearAlgebra[Determinant](Matrix(sz,shape=identity)+t*a);
	res := coeff(cp,t,deg);
	return res;
end proc;

# c calculations from universal substitution (what to substitute for each c coefficient)
c := proc(F::Array, a, b)
	len := LinearAlgebra[Dimension](F);
	for i from 1 to len - 1 do
		if b >= F[i] and b < F[i+1] then
			return qe_pf(F, a, F[i]);
		end if;
	end do;
end proc;

# substituting y's to be 0's
y_sub := proc(expr)
	return subs(y1=0, y2=0, y3=0, expr);
end proc;

# substituting expression involving c's with values from c_arr
c_sub := proc(expr, c_arr)
	local i, j, result, rows, cols;
	result := expr;
	rows := LinearAlgebra[Dimension](c_arr[1]);
	cols := LinearAlgebra[Dimension](c_arr[2]);

	for i from 1 to cols do
		result := subs(c[0, i] = 1, result);
	end do;
	
	for i from 1 to rows do
		for j from 1 to cols do
			result := subs(c[i,j] = c_arr[i][j], result);
		end do;
	end do;
	return result;
end proc;

# divided diff d_i on polyn p, in y var
sp_sym_y := proc(p, i) 

	local sb, pp, psym, pp1, t, dt;
	sb := {cat(y,i) = cat(y,(i+1)), cat(y,(i+1)) = cat(y,i)};

	if type(p, `*`) then
		pp := {op(p)};
	else
		pp := {p};
	fi;
  
	psym := {};
	pp1 := {};

	while nops(pp) > 0 do
		t := pp[1];
		dt := subs(sb, t);
	if evalb(t = dt) then
		psym := {t, op(psym)};
		pp := {op(2..nops(pp), pp)};
	elif member(dt, pp, 'k') then
		psym := {t, dt, op(psym)};
		pp := {op(2..k-1, pp), op(k+1..nops(pp), pp)};
	else
		pp1 := {op(pp1), t};
		pp := {op(2..nops(pp), pp)};
	fi;
	od;
	
	t := convert(pp1, `*`);
	RETURN(expand(normal((t - subs(sb, t)) / (cat(y,i) - cat(y,(i+1))))) * convert(psym, `*`));
end:
	
# set up for longest word Fulton
usp0 := proc(n)
	local res, term, i, j;
	res := 1; 
	for i from 1 to n-1 do
  	 # res := res * convert( [seq( c(F, i-j,i)*(-cat(y,n+1-i))^j, j=0..i )], `+`); 
  	 # expr_str := expr_str + "res * sum(c(F, i-j, i) * (-cat(y, n+1-i))^j, j=0..i);"
		term := 0;
		for j from 0 to i do
			term := term + c[i-j, i] * (-cat(y,n-i))^j;
  	 	end do;
	res := res * term;
  	end do;

	return res;
end proc;

# compute universal schubert polyn for perm w
usp := proc(w)
	description "Compute the universal schubert polyn for perm w.";

	local n;
	n := nops(w);
	while n > 0 and w[n] = n do
		n := n - 1;
	od;

	if n = 0 then
  		RETURN(1);
  	else
		RETURN(_usp_y([op(1..n, w)]));
  	fi;
end:

_usp := proc(w)

	local i, n, w1, usp1;
	option remember;
	n := nops(w);
	i := 1;

	while i < n and w[i] > w[i+1] do
    		i := i+1;
  	od;
  	
	if i = n then
    		RETURN(usp0(n));
  	fi;

	w1 := [op(1..i-1, w), w[i+1], w[i], op(i+2..n, w)];
	usp1 := _usp(w1);

  	RETURN(-sp_sym_y(usp1, i));
end:

# compute using y-divided difference
_usp_y := proc(w)
	local i, n, p1, p2, sb, w1, sp1;
	option remember;
	n := nops(w);
 	i := 1;

	while i < n and pos(w,i) > pos(w,i+1) do
		i := i+1;
	od;

	if i = n then
		RETURN(usp0(n));
	fi;

	sb := { w[pos(w,i)] = w[pos(w,i+1)], w[pos(w,i+1)] = w[pos(w,i)] };
	w1 := subs( sb, w );
	sp1 := _usp_y(w1);

	RETURN(-sp_sym_y(sp1, i));
end:

# gets all permutations in S_n with descents at subset of elements in F
perms_with_descent := proc(F::Array)
	local len, n, i;
	len := LinearAlgebra[Dimension](F);
	n := F[len];

	local descent_perms := [];
	local all_perms := combinat[permute]([seq(j, j=1..n)]);

	for perm in all_perms do
		local descent_index := 1; local add := true; i := 1;
		for i from 1 to n - 1 do
			if i = F[descent_index] then
				descent_index := descent_index + 1;
			else
				if perm[i] > perm[i+1] then
					add := false;
					break;
				end if;	
			end if;
		end do;
		if add then
			descent_perms := [op(descent_perms), perm];
		end if;
	end do;
	return descent_perms;
end proc;

# quantum schubert basis for given partial flag
qs_pf_basis := proc(A::Array)
	local qs_pf := [];

	local descent_perms := perms_with_descent(A);
	local len := nops(descent_perms);
	
	for i from 1 to len do
		qs_pf := [op(qs_pf), y_sub(usp(descent_perms[i]))];
	end do;

	return qs_pf;
end proc;


# testing 
local A := Array(1..3, [1,3,4]);
local c_arr := Array(1..3, 1..3, fill=0);

for i from 1 to 3 do
	for j from 1 to 3 do
		c_arr[i, j] := c(A, i, j);
	end do;
end do;